---
# https://docs.docker.com/install/linux/docker-ce/ubuntu/
- name: Install prerequisites for Docker
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common
  become: yes
  tags: [docker]

- name: Get Ubuntu release codename
  shell: lsb_release -cs
  changed_when: no
  check_mode: no
  register: release
  tags: [docker]

- block:
    - name: Install Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ release.stdout }} stable
        state: present
        filename: docker
      become: yes
      tags: [docker]

  rescue:
    - name: Install Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      become: yes
      tags: [docker]

    - name: Install Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ release.stdout }} stable
        state: present
        filename: docker
      become: yes
      tags: [docker]

- name: Install Docker CE
  apt:
    name: docker-ce
    state: present
  become: yes
  tags: [docker]

# This allows running docker commands without sudo
- name: Add user to docker group
  user:
    name: "{{ ansible_user_id }}"
    groups: docker
    append: yes
  become: yes
  tags: [docker]

- name: Install Docker Compose
  get_url:
    url: https://github.com/docker/compose/releases/download/1.21.2/docker-compose-Linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: 0755
  become: yes
  tags: [docker]

- name: Get list of Docker container IDs
  shell: docker container ls -aq
  register: docker_container_ids
  changed_when: no
  check_mode: no
  tags: [docker]

# https://docs.docker.com/config/containers/start-containers-automatically/
# The docker_container Ansible module isn't usable here because it always insists on changing container state
- name: Disable auto restart of containers
  shell: docker inspect {{ item }} --format={{ '{{.HostConfig.RestartPolicy}}' }} | grep -q '{no ' || docker update --restart=no {{ item }}
  loop: "{{ docker_container_ids.stdout_lines }}"
  register: result
  changed_when: result.stdout.find(item) != -1
  tags: [docker]
